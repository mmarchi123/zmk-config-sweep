/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&sk {
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp ESC>;
        };

        combo_navigation {
            key-positions = <6 8>;
            bindings = <&to 2>;
        };

        combo_ent {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp RET>;
        };

        combo_question {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp QUESTION>;
        };

        combo_com {
            timeout-ms = <50>;
            key-positions = <3 2>;
            bindings = <&kp COMMA>;
        };

        combo_slsh {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp SLASH>;
        };

        combo_sqt {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp SQT>;
        };

        combo_dqt {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp DQT>;
        };

        combo_bslh {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp BSLH>;
        };

        combo_lclk {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&mkp LCLK>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18>;
        };

        bt_layer {
            bindings = <&to 3>;
            key-positions = <0 9>;
            layers = <0>;
        };

        ctrlAltDel {
            bindings = <&kp LA(LC(DELETE))>;
            key-positions = <20 29>;
        };

        Colemak {
            bindings = <&to 4>;
            key-positions = <31 32>;
            layers = <0>;
            timeout-ms = <50>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <4 5>;
            layers = <0 2 1 4>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <14 15>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <24 25>;
        };

        word_caps {
            bindings = <&caps_word>;
            key-positions = <13 16>;
        };

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <4 5>;
            layers = <3>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <2 1>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <7 8>;
        };

        Qwerty {
            bindings = <&to 0>;
            key-positions = <31 32>;
            layers = <4>;
        };

        combo_dot {
            bindings = <&kp PERIOD>;
            key-positions = <13 14>;
        };
    };

    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold_Tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        morph_Q_tab: morph_Q_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_Q_TAB";
            bindings = <&kp Q>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        morph_T_alt_f4: morph_T_alt_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_T_ALT_F4";
            bindings = <&kp T>, <&kp LA(F4)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };

        t_layer_h_key: t_layer_h_key {
            compatible = "zmk,behavior-hold-tap";
            label = "T_LAYER_H_KEY";
            bindings = <&kp>, <&to>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
        };

        td_semi_caps: td_semi_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SEMI_CAPS";
            #binding-cells = <0>;
            bindings = <&kp SEMICOLON>, <&kp CAPSLOCK>;

            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwerty {
            bindings = <
&morph_Q_tab  &kp W  &kp E           &kp R                     &morph_T_alt_f4         &kp Y           &kp U                   &kp I           &kp O    &kp P
&kp A         &kp S  &ht LEFT_ALT D  &ht LEFT_GUI F            &ht LA(LEFT_SHIFT) G    &kp H           &ht LEFT_GUI J          &ht LEFT_ALT K  &kp L    &kp SEMI
&kp Z         &kp X  &kp C           &kp V                     &kp B                   &kp N           &kp M                   &kp COMMA       &kp DOT  &kp FSLH
                                     &kp LS(LA(LEFT_CONTROL))  &kp SPACE               &kp LEFT_SHIFT  &t_layer_h_key LCTRL 1
            >;

            label = "qwerty";
        };

        Num_Func {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5     &kp ASTRK     &kp N7  &kp N8  &kp N9  &kp MINUS
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10    &kp SLASH     &kp N4  &kp N5  &kp N6  &kp PLUS
&kp F11  &kp F12  &trans  &trans  &mo 2      &kp NUMBER_0  &kp N1  &kp N2  &kp N3  &kp ENTER
                          &to 0   &trans     &trans        &to 2
            >;

            label = "Num_Func";
        };

        Navigation_Sym_Media {
            bindings = <
&kp C_PREVIOUS         &kp C_NEXT            &kp C_PLAY_PAUSE       &kp C_VOLUME_DOWN      &kp C_VOLUME_UP    &kp PAGE_UP  &ht LS(LEFT_ALT) LC(LS(TAB))  &kp UP_ARROW  &ht LEFT_ALT LC(TAB)  &kp PAGE_DOWN
&ht HOME LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &ht END RIGHT_BRACKET  &kp GRAVE          &kp HOME     &kp LEFT_ARROW                &kp DOWN      &kp RIGHT             &ht END LS(DELETE)
&trans                 &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans                 &trans             &trans       &trans                        &trans        &trans                &trans
                                                                    &to 0                  &trans             &trans       &to 1
            >;

            label = "Nav_Sym_Media";
        };

        Bluetooth {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans
&none         &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans
&out OUT_BLE  &out OUT_USB  &none         &none         &none           &trans  &trans  &trans  &trans  &trans
                                          &to 0         &trans          &trans  &to 0
            >;

            label = "Bluetooth";
        };

        Colemak {
            bindings = <
&morph_Q_tab  &kp W  &kp F           &kp P                 &kp B        &kp J           &kp L                          &kp U                 &kp Y         &ht COLON SEMICOLON
&kp A         &kp R  &ht LEFT_ALT S  &ht LEFT_GUI T        &kp G        &kp M           &ht LEFT_GUI N                 &ht LEFT_ALT E        &kp I         &kp O
&kp Z         &kp X  &kp C           &kp D                 &kp V        &kp K           &kp H                          &ht UNDERSCORE COMMA  &ht EXCL DOT  &ht QUESTION SLASH
                                     &kp LS(LC(LEFT_ALT))  &kp SPACE    &kp LEFT_SHIFT  &t_layer_h_key LEFT_CONTROL 1
            >;

            label = "Colemak";
        };
    };
};
