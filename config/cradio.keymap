/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp ESC>;
        };

        combo_3 {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&to 3>;
        };

        combo_ent {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp RET>;
        };

        combo_1 {
            timeout-ms = <50>;
            key-positions = <30 33>;
            bindings = <&to 1>;
        };

        symbols {
            timeout-ms = <50>;
            key-positions = <23 26>;
            bindings = <&to 2>;
        };

        combo_scol {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp SEMI>;
            layers = <5 0 2 3>;
        };

        combo_com {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp COMMA>;
            layers = <5>;
        };

        combo_slsh {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp SLASH>;
            layers = <5>;
        };

        combo_sqt {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp SQT>;
        };

        combo_dqt {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp DQT>;
            layers = <0 5>;
        };

        combo_bslh {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp BSLH>;
        };

        combo_lclk {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&mkp LCLK>;
        };

        backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18>;
        };

        bt_layer {
            bindings = <&to 4>;
            key-positions = <0 9>;
            layers = <0>;
        };

        screen {
            bindings = <&kp LG(LS(S))>;
            key-positions = <19 10>;
        };

        ctrlAltDel {
            bindings = <&kp LA(LC(DELETE))>;
            key-positions = <20 29>;
        };

        Colemak {
            bindings = <&to 5>;
            key-positions = <31 32>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <4 5>;
            layers = <0 2 3 5>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <14 15>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <24 25>;
        };

        word_caps {
            bindings = <&caps_word>;
            key-positions = <13 16>;
        };

        bt_clear {
            bindings = <&bt BT_CLR>;
            key-positions = <4 5>;
            layers = <4>;
        };

        bt_bootloader {
            bindings = <&bootloader>;
            key-positions = <8 9>;
            timeout-ms = <50>;
            layers = <4>;
        };
    };

    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "Hold_Tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        morph_Q_tab: morph_Q_tab {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_Q_TAB";
            bindings = <&kp Q>, <&kp TAB>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        morph_copy: morph_copy {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_COPY";
            bindings = <&kp C>, <&kp LC(C)>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };

        morph_T_alt_f4: morph_T_alt_f4 {
            compatible = "zmk,behavior-mod-morph";
            label = "MORPH_T_ALT_F4";
            bindings = <&kp T>, <&kp LA(F4)>;

            #binding-cells = <0>;
            mods = <(MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Qwerty {
            bindings = <
&morph_Q_tab  &kp W  &kp E        &kp R         &morph_T_alt_f4       &kp Y                 &kp U             &kp I      &kp O    &kp P
&kp A         &kp S  &kp D        &kp F         &kp G                 &kp H                 &kp J             &kp K      &kp L    &kp SEMI
&kp Z         &kp X  &morph_copy  &kp V         &kp B                 &kp N                 &kp M             &kp COMMA  &kp DOT  &kp FSLH
                                  &kp LEFT_GUI  &ht LEFT_ALT SPACE    &ht LEFT_SHIFT ENTER  &ht LCTRL DELETE
            >;

            label = "qwerty";
        };

        Num_Media {
            bindings = <
&kp ESC  &kp C_PLAY_PAUSE  &kp C_PREVIOUS  &kp C_NEXT       &kp UNDERSCORE    &kp MINUS     &kp N7  &kp N8  &kp N9  &kp BSPC
&kp TAB  &trans            &kp C_VOL_DN    &kp C_VOLUME_UP  &kp PLUS          &kp EQUAL     &kp N4  &kp N5  &kp N6  &kp ENTER
&trans   &kp ASTRK         &trans          &trans           &kp DOT           &kp N0        &kp N1  &kp N2  &kp N3  &to 3
                                           &to 0            &kp LCTRL         &kp LEFT_ALT  &to 2
            >;

            label = "Num_Media";
        };

        Symbols {
            bindings = <
&kp ESC    &kp AT_SIGN  &kp HASH   &kp DOLLAR         &kp PERCENT    &kp CARET           &kp AMPERSAND         &kp ASTERISK           &ht COLON SEMI     &kp BACKSPACE
&kp TAB    &kp EQUAL    &kp GRAVE  &kp APOS           &kp APOS       &ht HOME BACKSLASH  &kp LEFT_BRACE        &kp RIGHT_BRACE        &ht END PIPE       &kp ENTER
&kp TILDE  &trans       &trans     &kp DOUBLE_QUOTES  &kp DQT        &kp LEFT_BRACKET    &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &to 3
                                   &to 0              &kp LCTRL      &kp LALT            &to 1
            >;

            label = "Symbols";
        };

        Arrows_mouse {
            bindings = <
&ht LA(F4) ESCAPE  &kp K_SCROLL_UP  &trans  &kp K_SCROLL_DOWN  &trans            &trans        &kp LC(LS(TAB))  &kp LC(TAB)   &trans     &kp BSPC
&kp TAB            &trans           &trans  &trans             &trans            &kp LEFT      &kp DOWN         &kp UP_ARROW  &kp RIGHT  &kp ENTER
&trans             &trans           &trans  &trans             &none             &trans        &trans           &trans        &trans     &trans
                                            &to 0              &kp LEFT_SHIFT    &kp LEFT_ALT  &to 1
            >;

            label = "Arrows_mouse";
        };

        bt {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp F1  &kp F2  &kp F3  &kp F4   &kp F5
&none         &trans        &trans        &trans        &trans          &kp F6  &kp F7  &kp F8  &kp F9   &kp F10
&out OUT_BLE  &out OUT_USB  &none         &none         &none           &trans  &trans  &trans  &kp F11  &kp F12
                                          &to 0         &trans          &trans  &to 0
            >;
        };

        Colemak {
            bindings = <
&kp Q  &kp W  &kp F  &kp P         &kp B                     &kp J                 &kp L          &kp U                 &kp Y         &ht COLON SEMICOLON
&kp A  &kp R  &kp S  &kp T         &kp G                     &kp M                 &kp N          &kp E                 &kp I         &kp O
&kp Z  &kp X  &kp C  &kp D         &kp V                     &kp K                 &kp H          &ht UNDERSCORE COMMA  &ht EXCL DOT  &ht QUESTION SLASH
                     &kp LEFT_GUI  &ht LEFT_CONTROL SPACE    &ht LEFT_SHIFT ENTER  &ht LCTRL DEL
            >;
        };
    };
};
